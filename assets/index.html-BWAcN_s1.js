import{_ as i,c as a,b as p,o as n}from"./app-BVpc6fz1.js";const t={};function e(l,s){return n(),a("div",null,s[0]||(s[0]=[p(`<h2 id="zip-函数和" tabindex="-1"><a class="header-anchor" href="#zip-函数和"><span>zip()函数和*</span></a></h2><p><code>zip(*strs)</code> 是 Python 中一个非常有用的功能，特别是在处理多个序列时。在这里，<code>zip</code> 函数和 <code>*</code> 运算符（解包运算符）结合使用，用于同时迭代多个序列（在你的例子中是字符串列表 <code>strs</code> 中的字符串）。让我逐步解释这个表达式的含义和工作原理：</p><h3 id="zip-函数" tabindex="-1"><a class="header-anchor" href="#zip-函数"><span><code>zip</code> 函数</span></a></h3><p>首先，<code>zip</code> 是一个内置函数，它接受多个可迭代对象（如列表、元组、字符串等）作为参数，并返回一个迭代器，这个迭代器生成由输入可迭代对象中元素组成的元组。举个例子：</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">b</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">c</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">zipped</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">zip</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">zipped</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">[(1,</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;a&#39;),</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">(2,</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;b&#39;),</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">(3,</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;c&#39;)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>zip</code> 将列表 <code>a</code> 和 <code>b</code> 中的相应元素配对。</p><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span><code>*</code> 运算符</span></a></h3><p><code>*</code> 运算符在这里用作解包运算符。它将 <code>strs</code> 列表中的每个元素（即每个字符串）解包为独立的参数传递给 <code>zip</code> 函数。</p><p>例如，假设 <code>strs = [&quot;flower&quot;, &quot;flow&quot;, &quot;flight&quot;]</code>。当执行 <code>zip(*strs)</code> 时，实际上是执行 <code>zip(&quot;flower&quot;, &quot;flow&quot;, &quot;flight&quot;)</code>。</p><h3 id="zip-strs" tabindex="-1"><a class="header-anchor" href="#zip-strs"><span><code>zip(*strs)</code></span></a></h3><p>当 <code>zip</code> 函数与 <code>*strs</code> 结合使用时，它实际上是在并行地遍历 <code>strs</code> 中的每个字符串。<code>zip</code> 会从每个字符串的相同位置取出字符，并将它们组合成一个元组。</p><p>以 <code>strs = [&quot;flower&quot;, &quot;flow&quot;, &quot;flight&quot;]</code> 为例，<code>zip(*strs)</code> 的操作过程是：</p><ol><li>从所有字符串的第一个字符中创建元组：<code>(&#39;f&#39;, &#39;f&#39;, &#39;f&#39;)</code></li><li>从所有字符串的第二个字符中创建元组：<code>(&#39;l&#39;, &#39;l&#39;, &#39;l&#39;)</code></li><li>以此类推，直到最短的字符串结束。</li></ol><p>所以，如果你打印 <code>zip(*strs)</code> 的结果，你会得到一个包含上述元组的迭代器。</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strs</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">flower</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">flow</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">flight</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">zip</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)))</span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">[(&#39;f&#39;,</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;f&#39;,</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;f&#39;),</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">(&#39;l&#39;,</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;l&#39;,</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;l&#39;),</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">(&#39;o&#39;,</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;o&#39;,</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;i&#39;),</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">(&#39;w&#39;,</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;w&#39;,</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;g&#39;)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个特性在处理多个序列时非常有用，特别是当你需要对它们的相应元素执行某些操作时。例如，在寻找多个字符串的最长公共前缀问题中，<code>zip(*strs)</code> 可以用来比较所有字符串的每个对应位置的字符。</p>`,16)]))}const k=i(t,[["render",e],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/python/03ia1dsr/","title":"zip() 函数","lang":"zh-CN","frontmatter":{"createTime":"2025/02/17 16:59:38","permalink":"/python/03ia1dsr/","title":"zip() 函数","description":"zip()函数和* zip(*strs) 是 Python 中一个非常有用的功能，特别是在处理多个序列时。在这里，zip 函数和 * 运算符（解包运算符）结合使用，用于同时迭代多个序列（在你的例子中是字符串列表 strs 中的字符串）。让我逐步解释这个表达式的含义和工作原理： zip 函数 首先，zip 是一个内置函数，它接受多个可迭代对象（如列表、元...","head":[["meta",{"property":"og:url","content":"https://notes.moniter.top/python/03ia1dsr/"}],["meta",{"property":"og:site_name","content":"Richie Lin"}],["meta",{"property":"og:title","content":"zip() 函数"}],["meta",{"property":"og:description","content":"zip()函数和* zip(*strs) 是 Python 中一个非常有用的功能，特别是在处理多个序列时。在这里，zip 函数和 * 运算符（解包运算符）结合使用，用于同时迭代多个序列（在你的例子中是字符串列表 strs 中的字符串）。让我逐步解释这个表达式的含义和工作原理： zip 函数 首先，zip 是一个内置函数，它接受多个可迭代对象（如列表、元..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"zip() 函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{},"autoDesc":true,"filePathRelative":"notes/python/library/function/function-zip.md"}');export{k as comp,d as data};
