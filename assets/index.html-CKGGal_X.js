import{_ as t,c as s,b as l,o as r}from"./app-BVpc6fz1.js";const i={};function o(a,e){return r(),s("div",null,e[0]||(e[0]=[l('<ul><li><a href="#111-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%9F%BA%E7%A1%80">11.1 中间件基础</a><ul><li><a href="#1111-%E4%B8%AD%E9%97%B4%E4%BB%B6">11.1.1 中间件</a><ul><li><a href="#%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8C%85%E5%90%AB%E4%BB%80%E4%B9%88">中间件包含什么</a></li><li><a href="#%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">中间件的应用场景</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">配置和使用中间件的注意事项</a></li></ul></li><li><a href="#1112-%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0">11.1.2 中间件的钩子函数</a><ul><li><a href="#process_request">process_request</a></li></ul></li></ul></li></ul><hr><ul><li>中间件定义的顺序怎样影响钩子函数的调用顺序</li><li>钩子函数的作用</li><li>中间件是插件系统，允许其根据业务场景做定制化</li></ul><h2 id="_11-1-1-中间件" tabindex="-1"><a class="header-anchor" href="#_11-1-1-中间件"><span>11.1.1 中间件</span></a></h2><ul><li>用于视图函数执行之前和执行之后做一些预处理和后处理操作，功能类似<strong>装饰器</strong></li><li>表现形式：Python类，类中定义了固定名称的方法（<strong>钩子函数</strong>）</li><li>框架会对每一个HTTP请求在特定的时机执行<strong>钩子函数</strong></li><li>配置地址：<code>settings.py</code> --&gt; <code>MIDDLEWARE</code><ul><li>标识当前系统加载的中间件</li><li>默认下：包含的都是Django内置的中间件</li></ul></li></ul><h3 id="中间件包含什么" tabindex="-1"><a class="header-anchor" href="#中间件包含什么"><span>中间件包含什么</span></a></h3><ul><li><p>中间件可以定义：5个钩子函数，名字是固定的</p></li><li><p>处理<strong>请求</strong>时，调用视图函数<strong>前</strong>依次<strong>从上到下</strong>处理MIDDLEWARE中声明的各个中间件，会有两个钩子函数调用</p><ul><li>process_request</li><li>process_view</li></ul></li><li><p>处理<strong>响应</strong>时，调用视图函数<strong>后</strong>依次<strong>从下到上</strong>处理MIDDLEWARE中声明的各个中间件，会有三个钩子函数调用</p><ul><li>process_exception</li><li>process_template_response</li><li>process_response</li></ul></li></ul><h3 id="中间件的应用场景" tabindex="-1"><a class="header-anchor" href="#中间件的应用场景"><span>中间件的应用场景</span></a></h3><ul><li>如：使用中间件对请求做出拦截，限制用户（可以从HttpRequest中拿到客户端的IP地址）的访问频率，例如1分钟内不允许访问10次。很显然，这需要在访问视图函数之前对用户做校验，因此可以利用<code>process_request</code>函数完成</li><li>视图返回JSON数据，需求不同，数据结构很难实现统一 <ul><li>可利用中间件对响应对象在做一层封装，统一结构数据，可以利用<code>process_response</code>函数完成</li></ul></li></ul><h3 id="配置和使用中间件的注意事项" tabindex="-1"><a class="header-anchor" href="#配置和使用中间件的注意事项"><span>配置和使用中间件的注意事项</span></a></h3><ul><li>钩子函数的实现</li><li>中间件的定义顺序</li></ul><h2 id="_11-1-2-中间件的钩子函数" tabindex="-1"><a class="header-anchor" href="#_11-1-2-中间件的钩子函数"><span>11.1.2 中间件的钩子函数</span></a></h2><h3 id="process-request" tabindex="-1"><a class="header-anchor" href="#process-request"><span>process_request</span></a></h3><ul><li>请求预处理函数，接受一个参数request，是HttpRequest对象实例，在完成通过URL找到实体函数之前，会调用此钩子函数，后根据函数返回值的不同得到不同的效果</li><li>返回None：继续处理当前请求 &gt;&gt; 执行其他中间件的process_request &gt;&gt; 执行process_view &gt;&gt; 视图函数</li><li>返回HttpResponse：不执行后面中间件的process_request和视图函数 &gt;&gt; 执行当前以及刚刚执行过的中间件的process_response方法，直到第一个中间件返回响应</li></ul>',14)]))}const p=t(i,[["render",o],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/python/p3p3s632/","title":"11.1 中间件基础","lang":"zh-CN","frontmatter":{"createTime":"2025/02/17 16:59:38","permalink":"/python/p3p3s632/","title":"11.1 中间件基础","description":"11.1 中间件基础 11.1.1 中间件 中间件包含什么 中间件的应用场景 配置和使用中间件的注意事项 11.1.2 中间件的钩子函数 process_request 中间件定义的顺序怎样影响钩子函数的调用顺序 钩子函数的作用 中间件是插件系统，允许其根据业务场景做定制化 11.1.1 中间件 用于视图函数执行之前和执行之后做一些预处理和后处理操作，...","head":[["meta",{"property":"og:url","content":"https://notes.moniter.top/python/p3p3s632/"}],["meta",{"property":"og:site_name","content":"Richie Lin"}],["meta",{"property":"og:title","content":"11.1 中间件基础"}],["meta",{"property":"og:description","content":"11.1 中间件基础 11.1.1 中间件 中间件包含什么 中间件的应用场景 配置和使用中间件的注意事项 11.1.2 中间件的钩子函数 process_request 中间件定义的顺序怎样影响钩子函数的调用顺序 钩子函数的作用 中间件是插件系统，允许其根据业务场景做定制化 11.1.1 中间件 用于视图函数执行之前和执行之后做一些预处理和后处理操作，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"11.1 中间件基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{},"autoDesc":true,"filePathRelative":"notes/python/前端框架/Django/chapter-11：Django中间件/01：中间件基础.md"}');export{p as comp,c as data};
