import{_ as a,c as i,b as s,o as t}from"./app-BVpc6fz1.js";const n={};function l(p,e){return t(),i("div",null,e[0]||(e[0]=[s('<ul><li><a href="#33-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83">3.3 初始化项目环境</a><ul><li><a href="#331-installed_apps%E4%B8%AD%E5%BA%94%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB">3.3.1 INSTALLED_APPS中应用的数据库迁移</a><ul><li><a href="#%E5%85%B7%E4%BD%93%E7%9A%84%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B">具体的实现过程</a></li></ul></li><li><a href="#332-%E5%88%9B%E5%BB%BA%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0">3.3.2 创建超级用户登录管理后台</a></li><li><a href="#333-%E7%BB%99%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8">3.3.3 给项目创建应用</a></li><li><a href="#334-python%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84requirementstxt%E6%96%87%E4%BB%B6">3.3.4 Python项目中的requirements.txt文件</a></li><li><a href="#335-%E9%A1%B9%E7%9B%AE%E8%A3%85%E8%BD%BD%E5%88%B0ide%E4%B8%AD">3.3.5 项目装载到IDE中</a></li></ul></li></ul><hr><h2 id="_3-3-1-installed-apps中应用的数据库迁移" tabindex="-1"><a class="header-anchor" href="#_3-3-1-installed-apps中应用的数据库迁移"><span>3.3.1 INSTALLED_APPS中应用的数据库迁移</span></a></h2><ul><li><code>manage.py</code>的<code>migrate</code>命令用于将应用的模型定义或修改同步到数据库中</li><li><code>migrate</code>命令会检查<code>INSTALLED_APPS</code>里配置的应用列表，依次迭代为每个应用创建所需要的数据表</li><li>默认安装的应用如果不需要，可以根据需要注释或者直接删除应用</li><li>数据库迁移命令：<code>python manage.py migrate</code></li></ul><h3 id="具体的实现过程" tabindex="-1"><a class="header-anchor" href="#具体的实现过程"><span>具体的实现过程</span></a></h3><ul><li>Django对于数据库的迁移工作通过两个命令来实现 <ul><li><code>python manage.py makemigrations</code></li><li><code>python manage.py migrate</code></li></ul></li><li>makemigrations：会检测应用目录下是否存在migrations目录。没有则创建 <ol><li>先根据应用的表结构定义生成一个0001_initial.py文件，里面定义了数据表的Schema</li><li>在执行migrate命令就可以创建数据表了</li></ol></li><li>对于项目之后的每一次表结构定义修改，都需要再次执行makemigrations命令 <ul><li>Django会重新定义一个新的数据库迁移文件，记录表结构之间的差异，需要依次递加，然后执行migrate命令，完成表结构定义的修改</li></ul></li><li>为了保证给已经完成的迁移工作不会重复执行，Django会把每一次数据库迁移记录到django_migrations表中，每次执行migrate前都会比较迁移文件是否已经记录在表中了，只有没有出现过的才会执行</li></ul><h2 id="_3-3-2-创建超级用户登录管理后台" tabindex="-1"><a class="header-anchor" href="#_3-3-2-创建超级用户登录管理后台"><span>3.3.2 创建超级用户登录管理后台</span></a></h2><ul><li><p>Django的超级用户拥有所有的权限，包括登录管理后台的能力</p></li><li><p>manage.py 提供了 createsuperuser命令用于创建超级用户，执行命令：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">python</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">manage.py</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">createsuperuser</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">--username=admin</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">--email=admin@email.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>管理后台的地址：<a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8000/admin</a></p></li></ul><h2 id="_3-3-3-给项目创建应用" tabindex="-1"><a class="header-anchor" href="#_3-3-3-给项目创建应用"><span>3.3.3 给项目创建应用</span></a></h2><ul><li><p>Django项目就是基于Django框架开发的web项目，包含了一组配置和多个应用，称作App</p></li><li><p>一个App就是一个Python包，并且遵循约定有着同样的目录结构</p></li><li><p>通常一个App可以包含模型，视图，模板和URL配置，可以被应用到多个Django项目中</p></li><li><p>Django项目是可以重用Python软件包</p></li><li><p>Django的目标：关注应用的功能逻辑，不需要关注存储它的基础设施</p></li><li><p>创建应用的过程：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">python</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">manage.py</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">startapp</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">post</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>上面的命令会在manage.py的统计目录看到多出一个post目录</p></li><li><p>目录结构如下</p><ul><li><img src="https://oss.moniter.top/blog/202206/20220627204247.png" alt="目录结构" tabindex="0" loading="lazy"><figcaption>目录结构</figcaption></li><li><strong>init</strong>.py：表示post是一个Python包</li><li>admin.py：将Model定义注册到管理后台，是Django Admin应用的配置文件。apps.py用于应用程序本身的配置</li><li>migrations目录：存储models.py文件中Model的定义及修改</li><li>migrations/<strong>init</strong>.py：表示migrations是一个python包</li><li>models.py：用于定义应用中所需要的数据表</li><li>tests.py：用于编写当前应用程序的单元测试</li><li>views.py：用于编写应用程序的视图</li></ul></li></ul><h2 id="_3-3-4-python项目中的requirements-txt文件" tabindex="-1"><a class="header-anchor" href="#_3-3-4-python项目中的requirements-txt文件"><span>3.3.4 Python项目中的requirements.txt文件</span></a></h2><ul><li><p>项目依赖关系清单</p></li><li><p>给当前项目生成requirements.txt文件，需要进入到根目录，执行</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pip</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">freeze</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>重建当前项目环境，执行：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pip</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">install</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-r</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h2 id="_3-3-5-项目装载到ide中" tabindex="-1"><a class="header-anchor" href="#_3-3-5-项目装载到ide中"><span>3.3.5 项目装载到IDE中</span></a></h2><p>在PyCharm中装载Django项目非常简单，需要完成以下两步操作：</p><ol><li><strong>打开项目目录</strong> ：在PyCharm中，选择<code>File</code>菜单，然后点击<code>Open</code>，在弹出的对话框中选择项目所在的目录。PyCharm会自动识别项目结构并加载项目。</li><li><strong>选择虚拟环境</strong>：在项目加载完成后，需要为项目选择一个虚拟环境。PyCharm支持多种虚拟环境，包括Python的内置虚拟环境和第三方虚拟环境管理器，如<code>virtualenv</code>和<code>conda</code>。在PyCharm中，选择<code>File</code>菜单，然后点击<code>Settings</code>（或<code>Preferences</code>，根据PyCharm版本不同），在<code>Project: [项目名称]</code>中选择<code>Project Interpreter</code>，然后选择或添加一个虚拟环境。</li></ol>',15)]))}const r=a(n,[["render",l],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/python/qvbg4ao8/","title":"3.3 初始化项目环境","lang":"zh-CN","frontmatter":{"createTime":"2025/02/17 16:59:38","permalink":"/python/qvbg4ao8/","title":"3.3 初始化项目环境","description":"3.3 初始化项目环境 3.3.1 INSTALLED_APPS中应用的数据库迁移 具体的实现过程 3.3.2 创建超级用户登录管理后台 3.3.3 给项目创建应用 3.3.4 Python项目中的requirements.txt文件 3.3.5 项目装载到IDE中 3.3.1 INSTALLED_APPS中应用的数据库迁移 manage.py的mig...","head":[["meta",{"property":"og:url","content":"https://notes.moniter.top/python/qvbg4ao8/"}],["meta",{"property":"og:site_name","content":"Richie Lin"}],["meta",{"property":"og:title","content":"3.3 初始化项目环境"}],["meta",{"property":"og:description","content":"3.3 初始化项目环境 3.3.1 INSTALLED_APPS中应用的数据库迁移 具体的实现过程 3.3.2 创建超级用户登录管理后台 3.3.3 给项目创建应用 3.3.4 Python项目中的requirements.txt文件 3.3.5 项目装载到IDE中 3.3.1 INSTALLED_APPS中应用的数据库迁移 manage.py的mig..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.moniter.top/blog/202206/20220627204247.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.3 初始化项目环境\\",\\"image\\":[\\"https://oss.moniter.top/blog/202206/20220627204247.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{},"autoDesc":true,"filePathRelative":"notes/python/前端框架/Django/chapter-03：项目框架搭建/3.3 初始化项目环境.md"}');export{r as comp,d as data};
