import{_ as c,c as h,a,b as k,d as p,w as i,e as n,r as e,o as r}from"./app-BVpc6fz1.js";const d={},o={class:"table-of-contents"};function g(u,s){const l=e("router-link"),t=e("RouteLink");return r(),h("div",null,[a("nav",o,[a("ul",null,[a("li",null,[p(l,{to:"#题目描述"},{default:i(()=>s[0]||(s[0]=[n("题目描述")])),_:1}),a("ul",null,[a("li",null,[p(l,{to:"#示例"},{default:i(()=>s[1]||(s[1]=[n("示例")])),_:1})]),a("li",null,[p(l,{to:"#提示"},{default:i(()=>s[2]||(s[2]=[n("提示")])),_:1})])])]),a("li",null,[p(l,{to:"#解题思路"},{default:i(()=>s[3]||(s[3]=[n("解题思路")])),_:1}),a("ul",null,[a("li",null,[p(l,{to:"#_1-水平扫描法"},{default:i(()=>s[4]||(s[4]=[n("1. 水平扫描法")])),_:1})]),a("li",null,[p(l,{to:"#_2-垂直扫描法"},{default:i(()=>s[5]||(s[5]=[n("2. 垂直扫描法")])),_:1})]),a("li",null,[p(l,{to:"#_3-分治法"},{default:i(()=>s[6]||(s[6]=[n("3. 分治法")])),_:1})]),a("li",null,[p(l,{to:"#_4-二分查找法"},{default:i(()=>s[7]||(s[7]=[n("4. 二分查找法")])),_:1})])])]),a("li",null,[p(l,{to:"#代码实现"},{default:i(()=>s[8]||(s[8]=[n("代码实现")])),_:1}),a("ul",null,[a("li",null,[p(l,{to:"#垂直扫描法"},{default:i(()=>s[9]||(s[9]=[n("垂直扫描法")])),_:1})]),a("li",null,[p(l,{to:"#zip-方法"},{default:i(()=>s[10]||(s[10]=[n("zip 方法")])),_:1})]),a("li",null,[p(l,{to:"#复杂度分析"},{default:i(()=>s[11]||(s[11]=[n("复杂度分析")])),_:1})])])]),a("li",null,[p(l,{to:"#方法比较"},{default:i(()=>s[12]||(s[12]=[n("方法比较")])),_:1})])])]),s[15]||(s[15]=k(`<hr><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p><strong>题目：</strong></p><ul><li>编写一个函数来查找字符串数组中的最长公共前缀。</li><li>如果不存在公共前缀，返回空字符串 &quot;&quot;。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>输入：strs</span><span class="space"> </span><span>=</span><span class="space"> </span><span>[&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span></span>
<span class="line"><span>输出：&quot;fl&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>输入：strs</span><span class="space"> </span><span>=</span><span class="space"> </span><span>[&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span></span>
<span class="line"><span>输出：&quot;&quot;</span></span>
<span class="line"><span>解释：输入不存在公共前缀。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提示" tabindex="-1"><a class="header-anchor" href="#提示"><span>提示</span></a></h3><ul><li><code>1 &lt;= strs.length &lt;= 200</code></li><li><code>0 &lt;= strs[i].length &lt;= 200</code></li><li><code>strs[i]</code> 仅由小写英文字母组成</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h2><p>有多种方法可以解决此问题，每种方法都有其特点：</p><h3 id="_1-水平扫描法" tabindex="-1"><a class="header-anchor" href="#_1-水平扫描法"><span>1. 水平扫描法</span></a></h3><p>从前往后扫描每个字符串：</p><ol><li>将第一个字符串假设为最长公共前缀。</li><li>遍历其余字符串，比较每个字符串与当前最长公共前缀，一旦发现不匹配的字符，立即减少公共前缀的长度。</li><li>继续此过程直到遍历完所有字符串。</li></ol><h3 id="_2-垂直扫描法" tabindex="-1"><a class="header-anchor" href="#_2-垂直扫描法"><span>2. 垂直扫描法</span></a></h3><p>按列比较所有字符串的字符：</p><ol><li>查看所有字符串的第一个字符，如果它们相同，继续到下一列；如果不同，算法结束。</li><li>重复此过程，直到字符串的末尾或者找到一个不匹配的字符。</li></ol><h3 id="_3-分治法" tabindex="-1"><a class="header-anchor" href="#_3-分治法"><span>3. 分治法</span></a></h3><p>将问题分解为更小的子问题：</p><ol><li>将字符串列表分成两半，分别找到每一半的最长公共前缀。</li><li>然后，将这两个前缀的公共部分作为结果。</li></ol><h3 id="_4-二分查找法" tabindex="-1"><a class="header-anchor" href="#_4-二分查找法"><span>4. 二分查找法</span></a></h3><p>利用二分查找优化查找过程：</p><ol><li>找到所有字符串中长度的最小值。</li><li>使用二分法在此范围内查找最长公共前缀。</li><li>检查每个字符串在这个中间长度上的前缀是否相同。</li></ol><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h2><h3 id="垂直扫描法" tabindex="-1"><a class="header-anchor" href="#垂直扫描法"><span>垂直扫描法</span></a></h3><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">longestCommonPrefix</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">查找字符串数组中的最长公共前缀</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Args:</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">strs:</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">字符串数组</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Returns:</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">str:</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">最长公共前缀</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">not</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">找到最短字符串的长度</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">min_length</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">min</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">逐列比较字符</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">range</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">min_length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">char</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">][</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">any</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">char</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">][:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">][:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">min_length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="zip-方法" tabindex="-1"><a class="header-anchor" href="#zip-方法"><span>zip 方法</span></a></h3><p>使用 Python 的 zip 函数进行字符比较：</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">typing</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">List</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">longestCommonPrefix</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">使用</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">zip</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">函数查找最长公共前缀</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">res</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">chars</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">zip</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span class="space"> </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">chars</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span class="space"> </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">res</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">+=</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">chars</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">break</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">res</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析"><span>复杂度分析</span></a></h3><ul><li>时间复杂度：O(S)，其中 S 是所有字符串中字符数量的总和</li><li>空间复杂度：O(1)，只需要常数级别的额外空间</li></ul><h2 id="方法比较" tabindex="-1"><a class="header-anchor" href="#方法比较"><span>方法比较</span></a></h2><ol><li><p><strong>垂直扫描法</strong></p><ul><li>优点：实现简单，直观</li><li>缺点：需要遍历所有字符</li></ul></li><li><p><strong>zip 方法</strong></p><ul><li>优点：代码简洁，利用 Python 内置函数</li><li>缺点：可能消耗更多内存</li></ul></li></ol><blockquote><p><strong>注意：</strong></p><ul><li>处理空字符串数组</li><li>考虑字符串长度不一的情况</li><li>注意内存使用效率</li></ul></blockquote>`,36)),a("p",null,[s[14]||(s[14]=n("函数 reversed：")),p(t,{to:"/notes/library/reversed%E5%87%BD%E6%95%B0.html"},{default:i(()=>s[13]||(s[13]=[n("reversed()指南")])),_:1})])])}const A=c(d,[["render",g],["__file","index.html.vue"]]),v=JSON.parse('{"path":"/python/pp43z095/","title":"14：最长公共前缀","lang":"zh-CN","frontmatter":{"createTime":"2025/02/17 16:59:38","permalink":"/python/pp43z095/","title":"14：最长公共前缀","description":"题目描述 题目： 编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 \\"\\"。 示例 示例 1： 示例 2： 提示 1 <= strs.length <= 200 0 <= strs[i].length <= 200 strs[i] 仅由小写英文字母组成 解题思路 有多种方法可以解决此问题，每种方法都有其特点： 1. 水平扫...","head":[["meta",{"property":"og:url","content":"https://notes.moniter.top/python/pp43z095/"}],["meta",{"property":"og:site_name","content":"Richie Lin"}],["meta",{"property":"og:title","content":"14：最长公共前缀"}],["meta",{"property":"og:description","content":"题目描述 题目： 编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 \\"\\"。 示例 示例 1： 示例 2： 提示 1 <= strs.length <= 200 0 <= strs[i].length <= 200 strs[i] 仅由小写英文字母组成 解题思路 有多种方法可以解决此问题，每种方法都有其特点： 1. 水平扫..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"14：最长公共前缀\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{},"autoDesc":true,"filePathRelative":"notes/python/算法/14.最长公共前缀.md"}');export{A as comp,v as data};
