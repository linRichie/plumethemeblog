import{_ as l,c as t,a,b as h,d as n,w as p,r as c,o as d,e}from"./app-BVpc6fz1.js";const r={},k={class:"table-of-contents"};function o(g,s){const i=c("router-link");return d(),t("div",null,[a("nav",k,[a("ul",null,[a("li",null,[n(i,{to:"#简介"},{default:p(()=>s[0]||(s[0]=[e("简介")])),_:1})]),a("li",null,[n(i,{to:"#_1-文件操作指令"},{default:p(()=>s[1]||(s[1]=[e("1. 文件操作指令")])),_:1}),a("ul",null,[a("li",null,[n(i,{to:"#_1-1-copy-复制文件"},{default:p(()=>s[2]||(s[2]=[e("1.1 COPY 复制文件")])),_:1})]),a("li",null,[n(i,{to:"#_1-2-add-高级复制文件"},{default:p(()=>s[3]||(s[3]=[e("1.2 ADD 高级复制文件")])),_:1})])])]),a("li",null,[n(i,{to:"#_2-容器运行指令"},{default:p(()=>s[4]||(s[4]=[e("2. 容器运行指令")])),_:1}),a("ul",null,[a("li",null,[n(i,{to:"#_2-1-cmd-容器启动命令"},{default:p(()=>s[5]||(s[5]=[e("2.1 CMD 容器启动命令")])),_:1})]),a("li",null,[n(i,{to:"#_2-2-entrypoint-入口点"},{default:p(()=>s[6]||(s[6]=[e("2.2 ENTRYPOINT 入口点")])),_:1})]),a("li",null,[n(i,{to:"#_2-3-env-设置环境变量"},{default:p(()=>s[7]||(s[7]=[e("2.3 ENV 设置环境变量")])),_:1})]),a("li",null,[n(i,{to:"#_2-4-volume-定义匿名卷"},{default:p(()=>s[8]||(s[8]=[e("2.4 VOLUME 定义匿名卷")])),_:1})]),a("li",null,[n(i,{to:"#_2-5-expose-声明端口"},{default:p(()=>s[9]||(s[9]=[e("2.5 EXPOSE 声明端口")])),_:1})]),a("li",null,[n(i,{to:"#_2-6-workdir-指定工作目录"},{default:p(()=>s[10]||(s[10]=[e("2.6 WORKDIR 指定工作目录")])),_:1})]),a("li",null,[n(i,{to:"#_2-7-user指定当前用户"},{default:p(()=>s[11]||(s[11]=[e("2.7 USER指定当前用户")])),_:1})]),a("li",null,[n(i,{to:"#_2-8-healthcheck-健康检查"},{default:p(()=>s[12]||(s[12]=[e("2.8 HEALTHCHECK 健康检查")])),_:1})])])])])]),s[13]||(s[13]=h(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Dockerfile 是用于构建 Docker 镜像的文本文件，它包含了一系列的指令和参数。本文将详细介绍常用的 Dockerfile 指令，包括 <code>FROM</code>、<code>RUN</code>、<code>COPY</code>、<code>ADD</code>、<code>CMD</code>、<code>ENTRYPOINT</code>、<code>ENV</code> 等。</p><h2 id="_1-文件操作指令" tabindex="-1"><a class="header-anchor" href="#_1-文件操作指令"><span>1. 文件操作指令</span></a></h2><h3 id="_1-1-copy-复制文件" tabindex="-1"><a class="header-anchor" href="#_1-1-copy-复制文件"><span>1.1 COPY 复制文件</span></a></h3><p><strong>格式</strong>：</p><ul><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;]&lt;源路径&gt;...&lt;目标路径&gt;</code></li><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;][&quot;&lt;源路径&gt;&quot;,...&quot;&lt;目标路径&gt;&quot;]</code></li></ul><p><code>COPY</code> 指令将从构建上下文目录中的源路径复制文件/目录到镜像内的目标路径。支持两种格式：命令行格式和函数调用格式。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>COPY</span><span class="space"> </span><span>package.json</span><span class="space"> </span><span>/usr/src/app/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>源路径特性：</strong></p><ul><li>支持多个源路径</li><li>支持通配符（遵循 Go 的 filepath.Match 规则）</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>COPY</span><span class="space"> </span><span>hom*</span><span class="space"> </span><span>/mydir/</span></span>
<span class="line"><span>COPY</span><span class="space"> </span><span>hom?.txt</span><span class="space"> </span><span>/mydir/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>目标路径说明：</strong></p><ul><li>支持绝对路径和相对路径（相对于 WORKDIR）</li><li>目录会自动创建</li><li>保留源文件的元数据（权限、时间戳等）</li></ul><p><strong>权限设置：</strong> 可以使用 <code>--chown</code> 选项设置文件的所属用户和组：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>COPY</span><span class="space"> </span><span>--chown=55:mygroup</span><span class="space"> </span><span>files*</span><span class="space"> </span><span>/mydir/</span></span>
<span class="line"><span>COPY</span><span class="space"> </span><span>--chown=bin</span><span class="space"> </span><span>files*</span><span class="space"> </span><span>/mydir/</span></span>
<span class="line"><span>COPY</span><span class="space"> </span><span>--choen=1</span><span class="space"> </span><span>files*</span><span class="space"> </span><span>/mydir/</span></span>
<span class="line"><span>COPY</span><span class="space"> </span><span>--chown=10:11</span><span class="space"> </span><span>files*</span><span class="space"> </span><span>/mydir/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-add-高级复制文件" tabindex="-1"><a class="header-anchor" href="#_1-2-add-高级复制文件"><span>1.2 ADD 高级复制文件</span></a></h3><p><code>ADD</code> 指令是 <code>COPY</code> 的增强版本，提供了更多功能：</p><p><strong>URL 支持：</strong></p><ul><li>支持从 URL 下载文件</li><li>下载文件权限默认为 600</li><li>不推荐使用此功能，建议使用 RUN + wget/curl</li></ul><p><strong>自动解压：</strong></p><ul><li>支持 tar、gzip、bzip2、xz 格式</li><li>自动解压到目标路径</li></ul><p>在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 ubuntu 中：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>FROM</span><span class="space"> </span><span>scratch</span></span>
<span class="line"><span>ADD</span><span class="space"> </span><span>ubuntu-xenial-core-cloudimg-amd64-root.tar.gz</span><span class="space"> </span><span>/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：</strong> 如果只想复制压缩文件而不解压，应使用 <code>COPY</code> 指令</p></blockquote><p><strong>最佳实践：</strong></p><ul><li>优先使用 <code>COPY</code>（功能单一，行为明确）</li><li>仅在需要自动解压缩时使用 <code>ADD</code></li></ul><blockquote><p><strong>警告：</strong> <code>ADD</code> 指令会使构建缓存失效，可能降低构建速度</p></blockquote><p><strong>权限设置：</strong> 同样支持 <code>--chown</code> 选项：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>ADD</span><span class="space"> </span><span>--chown=55:mygroup</span><span class="space"> </span><span>files*</span><span class="space"> </span><span>/mydir/</span></span>
<span class="line"><span>ADD</span><span class="space"> </span><span>--chown=bin</span><span class="space"> </span><span>files*</span><span class="space"> </span><span>/mydir/</span></span>
<span class="line"><span>ADD</span><span class="space"> </span><span>--chown=1</span><span class="space"> </span><span>files*</span><span class="space"> </span><span>/mydir/</span></span>
<span class="line"><span>ADD</span><span class="space"> </span><span>--chown=10:11</span><span class="space"> </span><span>files*</span><span class="space"> </span><span>/mydir/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-容器运行指令" tabindex="-1"><a class="header-anchor" href="#_2-容器运行指令"><span>2. 容器运行指令</span></a></h2><h3 id="_2-1-cmd-容器启动命令" tabindex="-1"><a class="header-anchor" href="#_2-1-cmd-容器启动命令"><span>2.1 CMD 容器启动命令</span></a></h3><p><strong>格式：</strong></p><ul><li>shell 格式：<code>CMD &lt;命令&gt;</code></li><li>exec 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code></li></ul><p><strong>作用：</strong></p><ul><li>指定容器启动时的默认命令</li><li>可以被 docker run 命令行参数覆盖</li><li>每个 Dockerfile 只能有一个 CMD</li></ul><p><strong>使用示例：</strong></p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">默认命令</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">CMD</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">nginx</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-g</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">,</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">daemon</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">off;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">带参数的</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">ENTRYPOINT</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENTRYPOINT</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">nginx</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">CMD</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-g</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">daemon</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">off;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最佳实践：</strong></p><ul><li>使用 exec 格式 ([&quot;command&quot;, &quot;param1&quot;, &quot;param2&quot;])</li><li>避免使用 shell 格式 (command param1 param2)</li><li>确保应用程序在前台运行</li></ul><blockquote><p><strong>注意：</strong> Docker 容器中的应用应该以前台方式运行，而不是作为后台服务</p></blockquote><h3 id="_2-2-entrypoint-入口点" tabindex="-1"><a class="header-anchor" href="#_2-2-entrypoint-入口点"><span>2.2 ENTRYPOINT 入口点</span></a></h3><p><strong>格式：</strong></p><ul><li>exec 格式：<code>ENTRYPOINT [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code></li><li>shell 格式：<code>ENTRYPOINT command param1 param2</code></li></ul><p><strong>作用：</strong></p><ul><li>配置容器启动时运行的命令</li><li>不会被 docker run 的命令行参数覆盖</li><li>可以接收 CMD 指令或运行参数</li></ul><p><strong>使用场景：</strong></p><ul><li>需要固定的启动命令</li><li>需要处理命令行参数</li><li>作为可执行程序使用</li></ul><p><strong>示例：</strong></p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">固定的入口点</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENTRYPOINT</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">nginx</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">可以在运行时添加参数</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">run</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">myimage</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-g</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">daemon</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">off;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-env-设置环境变量" tabindex="-1"><a class="header-anchor" href="#_2-3-env-设置环境变量"><span>2.3 ENV 设置环境变量</span></a></h3><p><strong>格式：</strong></p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ul><p><strong>作用：</strong></p><ul><li>设置环境变量</li><li>可被后续指令使用</li><li>在容器运行时仍然有效</li></ul><p><strong>示例：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>ENV</span><span class="space"> </span><span>VERSION=1.0</span><span class="space"> </span><span>DEBUG=on</span><span class="space"> </span><span>\\</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span>NAME=&quot;Happy</span><span class="space"> </span><span>Feet&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>支持的指令：</strong> ADD、COPY、ENV、EXPOSE、LABEL、USER、WORKDIR、VOLUME、STOPSIGNAL、ONBUILD</p><p><strong>最佳实践：</strong></p><ul><li>使用环境变量增加构建灵活性</li><li>一个 Dockerfile 可通过不同环境变量构建不同镜像</li></ul><h3 id="_2-4-volume-定义匿名卷" tabindex="-1"><a class="header-anchor" href="#_2-4-volume-定义匿名卷"><span>2.4 VOLUME 定义匿名卷</span></a></h3><p><strong>格式：</strong></p><ul><li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;]</code></li><li><code>VOLUME &lt;路径&gt;</code></li></ul><p><strong>作用：</strong></p><ul><li>声明容器数据持久化目录</li><li>避免向容器存储层写入数据</li><li>运行时可被显式挂载覆盖</li></ul><p><strong>示例：</strong></p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">声明匿名卷</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VOLUME</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">运行时覆盖匿名卷</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">run</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-d</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-v</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">mydata:/data</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">image_name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-expose-声明端口" tabindex="-1"><a class="header-anchor" href="#_2-5-expose-声明端口"><span>2.5 EXPOSE 声明端口</span></a></h3><p><strong>格式：</strong></p><p><code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></p><p><strong>作用：</strong></p><ul><li>声明容器对外提供的服务端口</li><li>帮助镜像使用者理解端口用途</li><li>配合 docker run -P 实现随机端口映射</li></ul><blockquote><p><strong>注意：</strong> EXPOSE 仅作为文档说明使用，不会自动开启端口，需要 -p 参数映射端口</p></blockquote><h3 id="_2-6-workdir-指定工作目录" tabindex="-1"><a class="header-anchor" href="#_2-6-workdir-指定工作目录"><span>2.6 WORKDIR 指定工作目录</span></a></h3><p><strong>格式：</strong></p><p><code>WORKDIR &lt;工作目录路径&gt;</code></p><p><strong>作用：</strong></p><ul><li>设置工作目录</li><li>影响后续指令的工作路径</li><li>不存在的目录会被自动创建</li></ul><p><strong>最佳实践：</strong></p><ul><li>使用绝对路径</li><li>避免使用 RUN cd 命令</li><li>每个 RUN 指令都在独立的容器中执行</li></ul><h3 id="_2-7-user指定当前用户" tabindex="-1"><a class="header-anchor" href="#_2-7-user指定当前用户"><span>2.7 USER指定当前用户</span></a></h3><p><strong>格式：</strong></p><p><code>USER &lt;用户名&gt;[:&lt;用户组&gt;]</code></p><p><strong>作用：</strong></p><ul><li>指定后续命令的执行用户</li><li>影响 RUN、CMD 和 ENTRYPOINT 指令</li><li>用户必须预先创建</li></ul><p><strong>示例：</strong></p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RUN</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">groupadd</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-r</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">redis</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&amp;&amp;</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">useradd</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-r</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-g</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">redis</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">redis</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">USER</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">redis</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RUN</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">redis-server</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最佳实践：</strong></p><ul><li>避免使用 root 用户运行应用</li><li>使用 gosu 代替 su/sudo 切换用户</li><li>在构建阶段创建所需用户</li></ul><p><strong>使用 gosu 示例：</strong></p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">建立redis用户，并使用gosu换另一个用户执行命令</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RUN</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">groupadd</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-r</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">redis</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&amp;&amp;</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">useradd</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-r</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-g</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">redis</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">redis</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">下载gosu</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RUN</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">wget</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-O</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/usr/local/bin/gosu</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&amp;&amp;</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chmod</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">+X</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/usr/local/bin/gosu</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">$$</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">gosu</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">nobody</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">设置CMD，并以另外的用户执行</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">CMD</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">exec</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">gosu</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">redis</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">redis-server</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-8-healthcheck-健康检查" tabindex="-1"><a class="header-anchor" href="#_2-8-healthcheck-健康检查"><span>2.8 HEALTHCHECK 健康检查</span></a></h3><p><strong>格式：</strong></p><ul><li><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>: 设置检查容器健康状态的命令</li><li><code>HEALTHCHECK NONE</code>: 禁用基础镜像中的健康检查指令</li></ul><p><strong>作用：</strong></p><ul><li>定期检查容器服务状态</li><li>发现服务异常（如死锁、死循环）</li><li>支持容器自动调度和故障转移</li></ul><p><strong>状态变化：</strong></p><ul><li><code>starting</code>: 初始状态</li><li><code>healthy</code>: 检查成功</li><li><code>unhealthy</code>: 连续检查失败</li></ul><p><strong>支持的选项：</strong></p><ul><li>--interval=&lt;间隔&gt; : 两次健康检查的间隔，默认为30秒</li><li>--timeout=&lt;时长&gt; : 康检查命令运行超时时间，如果超过这个时间，本次健康检查被视为失败，默认30秒</li><li>--retries=&lt;次数&gt; : 当连续时报指定次数后，则将容器状态视为unhealthy,默认3次</li></ul><p><strong>返回值：</strong></p><ul><li><code>0</code>: 检查成功</li><li><code>1</code>: 检查失败</li><li><code>2</code>: 保留值，不要使用</li></ul><h4 id="示例-检查-web-服务" tabindex="-1"><a class="header-anchor" href="#示例-检查-web-服务"><span>示例：检查 Web 服务</span></a></h4><div class="language-yml line-numbers-mode" data-ext="yml" data-title="yml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">FROM</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">nginx</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">RUN</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">apt-get</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">update</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&amp;&amp;</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">apt-get</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">install</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-y</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">curl</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&amp;&amp;</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">rm</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-rf</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/var/lib/apt/lists/*</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">HEALTHCHECK</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">--interval=5s</span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">--timeout=3s</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">\\</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">CMD</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">curl</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-fs</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">http://localhost/</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">||</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">exit</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">说明：这里我们设置了每</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">5</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">3</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">秒没响应就视为失败，并且使用</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">curl</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-fs</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">http://localhost/</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">||</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">exit</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">1</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">作为健康检查命令</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>运行示例：</strong></p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">build</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-t</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">myweb:v1</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.</span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#构建镜像</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">run</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-d</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">--name</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">web</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-p</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">80:80</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">myweb:v1</span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#启动容器</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">container</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ls</span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#查看容器状态</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看健康状态：</strong></p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">inspect</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">--format</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">{{json .State.Health}}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">web</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">python</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-m</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">json.tool</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><strong>参考文档：</strong><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener noreferrer">Dockerfile官当文档</a><br><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/" target="_blank" rel="noopener noreferrer">Dockerfile实践文档</a><br><a href="https://github.com/docker-library/docs" target="_blank" rel="noopener noreferrer">Docker官方镜像</a></p></blockquote>`,108))])}const A=l(r,[["render",o],["__file","index.html.vue"]]),D=JSON.parse('{"path":"/linux/07rc3zsa/","title":"07. Dockerfile指令详解","lang":"zh-CN","frontmatter":{"createTime":"2025/02/17 16:59:04","permalink":"/linux/07rc3zsa/","title":"07. Dockerfile指令详解","description":"简介 Dockerfile 是用于构建 Docker 镜像的文本文件，它包含了一系列的指令和参数。本文将详细介绍常用的 Dockerfile 指令，包括 FROM、RUN、COPY、ADD、CMD、ENTRYPOINT、ENV 等。 1. 文件操作指令 1.1 COPY 复制文件 格式： COPY [--chown=<user>:<group>]<源路...","head":[["meta",{"property":"og:url","content":"https://notes.moniter.top/linux/07rc3zsa/"}],["meta",{"property":"og:site_name","content":"Richie Lin"}],["meta",{"property":"og:title","content":"07. Dockerfile指令详解"}],["meta",{"property":"og:description","content":"简介 Dockerfile 是用于构建 Docker 镜像的文本文件，它包含了一系列的指令和参数。本文将详细介绍常用的 Dockerfile 指令，包括 FROM、RUN、COPY、ADD、CMD、ENTRYPOINT、ENV 等。 1. 文件操作指令 1.1 COPY 复制文件 格式： COPY [--chown=<user>:<group>]<源路..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"07. Dockerfile指令详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{},"autoDesc":true,"filePathRelative":"notes/linux/Kubernetes/Docker系列学习/Docker系列学习-07.Dockerfile指令详解.md"}');export{A as comp,D as data};
