import{_ as i,c as a,b as l,o as n}from"./app-BVpc6fz1.js";const e={};function p(h,s){return n(),a("div",null,s[0]||(s[0]=[l(`<ul><li><a href="#42-model%E7%9B%B8%E5%85%B3%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">4.2 Model相关的概念和使用方法</a><ul><li><a href="#421-model%E7%9A%84%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86">4.2.1 Model的组成部分</a><ul><li><a href="#djangodbmodelsmodel">django.db.models.Model</a></li><li><a href="#meta%E5%86%85%E9%83%A8%E7%B1%BB%E5%A3%B0%E6%98%8E%E5%85%83%E6%95%B0%E6%8D%AE">Meta内部类声明元数据</a></li><li><a href="#%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E8%A1%A8%E9%A1%B9%E7%9A%84field%E5%AE%9E%E4%BE%8B">定义数据表项的Field实例</a></li><li><a href="#__str__%E6%96%B9%E6%B3%95">__str__方法</a></li></ul></li><li><a href="#422-meta%E5%85%83%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%B1%9E%E6%80%A7%E8%AF%B4%E6%98%8E">4.2.2 Meta元数据类属性说明</a></li><li><a href="#423-field%E7%9A%84%E9%80%9A%E7%94%A8%E5%AD%97%E6%AE%B5%E9%80%89%E9%A1%B9">4.2.3 Field的通用字段选项</a></li><li><a href="#424-%E5%9F%BA%E7%A1%80%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B">4.2.4 基础字段类型</a><ul><li><a href="#djangodbmodelsfield">django.db.models.Field</a><ul><li><a href="#db_typeconnection">db_type(connection)</a></li><li><a href="#get_prep_valuevalue">get_prep_value(value)</a></li><li><a href="#from_db_valuevalueexpressionconnection">from_db_value(value,expression,connection)</a></li></ul></li><li><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B">常用的基础字段类型</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B">自定义一个字段类型</a></li></ul></li><li><a href="#425-%E4%B8%89%E7%A7%8D%E5%85%B3%E7%B3%BB%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B">4.2.5 三种关系字段类型</a><ul><li><a href="#%E5%A4%9A%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB%E7%B1%BB%E5%9E%8B">多对一关系类型</a></li><li><a href="#%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB%E7%B1%BB%E5%9E%8B">一对一关系类型</a></li><li><a href="#%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E7%B1%BB%E5%9E%8B">多对多关系类型</a></li></ul></li><li><a href="#426-model%E7%9A%84%E7%BB%A7%E6%89%BF%E6%A8%A1%E5%9E%8B">4.2.6 Model的继承模型</a><ul><li><a href="#%E6%8A%BD%E8%B1%A1%E5%9F%BA%E7%B1%BB">抽象基类</a></li><li><a href="#%E5%A4%9A%E8%A1%A8%E7%BB%A7%E6%89%BF">多表继承</a></li><li><a href="#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%9E%8B">代理模型</a></li></ul></li></ul></li></ul><hr><ul><li>Model是Django ORM的核心，有许多特性（继承模型，元数据）</li><li>需要遵守一些规则：字段类型必须是Field类型</li></ul><h2 id="_4-2-1-model的组成部分" tabindex="-1"><a class="header-anchor" href="#_4-2-1-model的组成部分"><span>4.2.1 Model的组成部分</span></a></h2><p>通常包含四个部分</p><ul><li>继承自：<code>django.db.models.Model</code></li><li>Model元数据声明（Meta内部类）</li><li>若干个Field类型的字段</li><li><code>__str__</code>方法</li></ul><h3 id="django-db-models-model" tabindex="-1"><a class="header-anchor" href="#django-db-models-model"><span>django.db.models.Model</span></a></h3><p>通过类之间的继承，Django主要对自定义的Model添加了两个属性</p><ul><li>id：每一个Model必须有且仅有一个Field字段的primary_key属性设置为True，即必须要有主键，通常在定义Model的时候不需要关注主键字段，基类会自动添加一个auto-incrementing id 作为主键</li><li>objects：是Manager（django.db.models.Manager）类的实例，称为查询管理器，是数据库查询的入口</li></ul><h3 id="meta内部类声明元数据" tabindex="-1"><a class="header-anchor" href="#meta内部类声明元数据"><span>Meta内部类声明元数据</span></a></h3><p>Meta是一个类容器，Django会将容器中的元数据选项定义附加到Model中<br> 常见的元数据定义有：数据表名称，是否是抽象类，权限定义，索引定义等<br> Meta定义的元数据相当于Model的配置信息，可以直接在shell环境中打印</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">post</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">imoprt</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Topic</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Topic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Meta</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Topic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Meta</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">__dict__</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Meta内部类可选，用户的Model没有需要完全可以不定义Meta，Django会自动应用默认的元数据到Model上</li></ul><h3 id="定义数据表项的field实例" tabindex="-1"><a class="header-anchor" href="#定义数据表项的field实例"><span>定义数据表项的Field实例</span></a></h3><ul><li>Model中的每个字段都是Field（<code>django.db.models.fields.Field</code>）类型的实例,根据Field的实际类型确认下面的信息 <ul><li>数据库中的列类型</li><li>渲染表单时使用的默认HTML部件</li><li>管理后台与自动生成的表单中的数据验证</li></ul></li></ul><h3 id="str-方法" tabindex="-1"><a class="header-anchor" href="#str-方法"><span>__str__方法</span></a></h3><ul><li>__str__方法是为print这样的打印函数设计的，此方法不定义，打印对象会显示对象的内存地址</li></ul><h2 id="_4-2-2-meta元数据类属性说明" tabindex="-1"><a class="header-anchor" href="#_4-2-2-meta元数据类属性说明"><span>4.2.2 Meta元数据类属性说明</span></a></h2><ul><li>Meta类不数据Model的字段，但可以用来标识一些属性</li><li>一些重要的元数据和含义以及使用方法 <ul><li><p>abstract：布尔类型的变量</p><ul><li>True：标识当前的Model是抽象基类，这个元选项不具备传递性，只对当前声明的类有小</li></ul></li><li><p>proxy：布尔类型的变量</p><ul><li>False：默认值</li><li>True；表示为基类的代理模型</li></ul></li><li><p>db_table：用于指定数据表的名称</p><ul><li>默认会使用Django的表名生成规则</li><li>例子：<code>db_table=&#39;topic&#39;</code></li><li>对抽象基类是无效的，不应该在抽象基类中去声明它，因为抽象基类可以被多个子类继承，如果数据表名也可以继承，会在数据库创建数据表的时候抛出异常错误</li></ul></li><li><p>ordering：指定获取对象列表时的排序规则，是一个字符串的列表或元组对象</p><ul><li>每一个字符串都是Model中定义的字段名，前面加上<code>-</code>，代表逆序，默认正序</li><li>例子 <ul><li><code>ordering = [&#39;created_time&#39;]</code>: 正序</li><li><code>ordering = [&#39;-created_time&#39;]</code>: 逆序</li><li><code>ordering = [&#39;created_time&#39;,&#39;-last_modified&#39;]</code>: 先按照created_time正序，然后按last_modified逆序</li><li>建议当所有的查询都需要按照特定的规则排序时，才设置这个元选项，否则，可以在特定的查询中指定排序规则</li></ul></li></ul></li><li><p>managed：布尔类型的变量</p><ul><li>True：默认值。代表Django会管理数据库的生命周期，即可利用Django提供的工具完成创建和删除数据表</li><li>False：Django不会管理这些Model所对应的数据表</li></ul><blockquote><p><strong>当在执行migrate命令之前那已经在数据库中创建了数据表，此时就需要把managed设置为False，让用户自己去管理</strong> 需要注意下面的问题</p><ol><li>当Model中没有声明主键，即使managed设置为False，Django也会自定添加列为id的自增主键</li><li>如果Model中包含ManyToManyField类型的字段，且指向的Model也是自管理的（managed=False），那Django不会给这种关系创建中间表，需要主动创建中间表，并使用<code>ManyToManyField.through</code>指定关联关系</li></ol></blockquote><ul><li><p>indexes：列表类型的元数据</p></li><li><p>定义Model的索引</p></li><li><p>列表中的每个元素都是index（django.db.models.indexes.Index）类型的实例</p></li><li><p>Index类的定义</p><ul><li><code>class Index(field()=[], name=None, db_tablespace=None)</code><ul><li>field: 列表对象，指定索引的字段，必填项，至少包含一个字段</li><li>name：索引的名称</li><li>db_tablespace：表空间，用于优化数据库性能（用于PostgreSQL，Oracle）</li></ul></li></ul></li><li><p>例子</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">django</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">db</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">indexs</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Index</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fields</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">title</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]),</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Index</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fields</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">title</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">is_online</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">title_is_online_idx</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>unique_together：常见的元组类型元选项</p><ul><li>包含多个元组对象，标识联合唯一约束，在数据库表现为联合唯一索引</li><li>优点：将数据取值的限制抽离出业务逻辑，放在框架和数据库层面处理</li><li>例子 <ul><li><code>unique_together = ((&#39;title&#39;,&#39;is_online&#39;),(&#39;title&#39;,&#39;content&#39;))</code></li><li><code>unique_together = (&#39;title&#39;,&#39;is_online&#39;)</code></li></ul></li></ul><blockquote><p>ManyToManyField类型的字段不能包含在<code>unique_together</code>中</p></blockquote></li><li><p>verbose_name 和 verbose_name_plural</p><ul><li>两个元选项用于给Model类起一个方便阅读的名称，主要用在管理后台上的展示</li></ul></li><li><p>default_permissions</p><ul><li>默认会给每一个定义的Model设置三个权限：add，change，delete</li></ul></li><li><p>permissions</p><ul><li><p>此元选项给Model添加额外的权限。permissions是一个包含二元组的元组或者列表</p><ul><li>格式：<code>(权限代码,权限名称)</code></li><li>例子：</li></ul><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">permissions</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">can_read_topic</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">可以阅读话题</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">can_discuss_topic</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">可以评论话题</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><h2 id="_4-2-3-field的通用字段选项" tabindex="-1"><a class="header-anchor" href="#_4-2-3-field的通用字段选项"><span>4.2.3 Field的通用字段选项</span></a></h2><ul><li>blank：数据验证相关字段，体现在管理后台录入数据的校验规则 <ul><li>默认值：False，不允许输入空值</li><li>True：允许输入空值</li></ul></li><li>unique：数据库级别的选项，表明必须是唯一的；对ManyToManyField和OneToOneField关系类型不起作用 <ul><li>默认值：False</li><li>设置为True，就不需要对这个字段加上索引选项了</li></ul></li><li>null：影响表字段属性，规定字段的数据是否可以是空值 <ul><li>默认值：False</li><li>True：会在数据库中将空值存储为NULL</li><li>对于CharField和TextField的字符串类型，null字段应用总是设置为False， <ul><li>如果设置为True，对于“空数据”会有两个概念：空字符串和NULL</li><li>例外：<strong>当CharField同时设置了unique=True和blank=True,则需要设置null=True，防止保存多个空白值时违反唯一性约束</strong></li></ul></li></ul></li><li>db_index：索引属性 <ul><li>默认值：False</li><li>True：会为字段创建数据库索引</li></ul></li><li>db_column：设置数据库表字段的名称</li><li>default：给字段设置默认值 <ul><li>lambda表达式不可以作为default的参数值，因为不能被migrations命令序列化</li><li>对于ForeignKey的字段，默认值设置的应该是主键而不应该是Model对象实例</li></ul></li><li>primary_key：主键属性 <ul><li>默认值：False</li><li>True：成为Model的主键字段，且不允许其他的字段再次将该选项设置为True</li><li>特性： <ul><li>在数据库层面：primary_key=True 意味着对应的字段唯一且不能是NULL</li><li>主键字段是只读的</li></ul></li></ul></li><li>choices： <ul><li><p>给字段设置可以选择的值，是一个可迭代的对象（列表或者元组），每一个元素都是一个二元组（A，B），A是选择的对象（作为字段值使用），B是A的描述信息</p></li><li><p>choices字段在管理后台的显示上会有文本框变成选择框，框中的可选值就是choices中的元组</p></li><li><blockquote><p>Django建议将choices定义在Model的内部，是代码更加规整</p></blockquote></li><li><p>例如</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">django</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">db</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span class="space"> </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">People</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">models</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Model</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">MALE</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">FEMALE</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">f</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">GENDER_CHOICES</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">MALE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">男性</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">FEMALE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">女性</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>但在数据库中还是会遵循Field类型对应的数据表字段类型</p></li></ul></li><li>help_text：显示字段的提示信息</li><li>verbose_name：给字段设置可读性更高的名称</li></ul><h2 id="_4-2-4-基础字段类型" tabindex="-1"><a class="header-anchor" href="#_4-2-4-基础字段类型"><span>4.2.4 基础字段类型</span></a></h2><p>Django内置的字段类型，按照与其他的Model存在关联分为两类</p><ul><li>基础字段类型：字符串，数字，时间，二进制等</li><li>关系字段类型：只有三个</li></ul><h3 id="django-db-models-field" tabindex="-1"><a class="header-anchor" href="#django-db-models-field"><span>django.db.models.Field</span></a></h3><p>对于Field，只需要关注三个方面：</p><ul><li>映射到数据表的列类型（db_type）</li><li>将Python对象映射到数据表（get_prep_value）</li><li>从数据库返回python对象（from_db_value）</li></ul><h4 id="db-type-connection" tabindex="-1"><a class="header-anchor" href="#db-type-connection"><span>db_type(connection)</span></a></h4><ul><li>根据所配置的数据库后端返回Field对应的数据库列类型</li><li><strong>对这个方法重载，需要考虑不同的数据库后端列类型兼容的问题</strong></li><li>此方法只会在Django为Model生成创建表语句的时候调用一次，其他任何时候都不会使用。</li><li>此方法实现较为复杂，但不会影响系统性能</li></ul><h4 id="get-prep-value-value" tabindex="-1"><a class="header-anchor" href="#get-prep-value-value"><span>get_prep_value(value)</span></a></h4><ul><li>参数value是Model属性的当前值</li><li>该方法对value操作，最终返回用作数据库查询的参数</li><li>Model对象保存到数据库中的时候，也会将该方法的返回值作为该列数据保存</li></ul><h4 id="from-db-value-value-expression-connection" tabindex="-1"><a class="header-anchor" href="#from-db-value-value-expression-connection"><span>from_db_value(value,expression,connection)</span></a></h4><ul><li>与get_prep_value的作用相反，将从数据库中返回的数据转换为Python对象</li></ul><h3 id="常用的基础字段类型" tabindex="-1"><a class="header-anchor" href="#常用的基础字段类型"><span>常用的基础字段类型</span></a></h3><ul><li>IntegerField <ul><li>SmallIntegerField: 小整数</li><li>BigIntegerField: 64位整数</li><li>PositiveIntegerField: 只允许存储大于等于0的整数</li></ul></li><li>AutoField：根据ID自增的IntegerField <ul><li>BigAutoField：使用的是8个字节的存储空间</li></ul></li><li>CharField： <ul><li>有必填参数：max_length,且取值只能是大于0的整数</li></ul></li><li>TextField</li><li>BooleanField：布尔类型 <ul><li>某个字段的取值只能是True或False的情况</li></ul></li><li>DateField和DateTimeField <ul><li>DateField是日期，以Python的datetime.date实例表示</li><li>DateTime是日期时间，以Python的达特time.datetime实例表示</li><li>都有两个特殊的参数选项可以设置 <ul><li>auto_now：此选项应用在对象保存的时候，会自动设置为当前时间</li><li>auto_now_add：此选项应用在首次创建对象的时候，会自动将字段设置为当前时间</li></ul></li><li>auto_now,auto_now_add,default是互斥的，不能组合在一起使用</li></ul></li><li>EmailField <ul><li>存储字符串类型的数据，是专门用来存储邮箱地址</li><li>内部有使用EmailValidator验证器对输入的字符串进行校验</li></ul></li></ul><h3 id="自定义一个字段类型" tabindex="-1"><a class="header-anchor" href="#自定义一个字段类型"><span>自定义一个字段类型</span></a></h3><ul><li>GenericIPAddressField：存储IP地址</li><li>URLField：存储URL</li><li>FloatField：存储浮点数的字段类型</li></ul><h2 id="_4-2-5-三种关系字段类型" tabindex="-1"><a class="header-anchor" href="#_4-2-5-三种关系字段类型"><span>4.2.5 三种关系字段类型</span></a></h2><ul><li>多对一（ForeignKey）</li><li>一对一（OneToOneField）</li><li>多对多（ManyToManyField）</li></ul><h3 id="多对一关系类型" tabindex="-1"><a class="header-anchor" href="#多对一关系类型"><span>多对一关系类型</span></a></h3><ul><li>在数据库中体现为：<strong>外键关联关系</strong></li><li>可以和其他Model建立关联，也可和自己建立关联，描述多对一的关系</li><li>ForeignKey的定义方法：<code>class django.db.models.ForeignKey(to, on_delete, **options)</code></li><li>两个必填的参数 <ul><li>to：指定所关联的Model，取值可以是直接引用其他的Model，也可以是Model对应的字符串名称，要创建递归的关联关系，即Model自身存在多对一的关系，可以设置为字符串self</li><li>on_delete：删除关联表的数据时，此参数决定Django会执行什么样的SQL约束，可选值 <ul><li>CASCADE：级联删除，大部分应该选择的约束</li><li>PROTECT：删除被引用对象时，会抛出ProtectedError异常</li><li>SET_NULL：设置删除对象所关联的外键字段为null，前提是设置了选项null为True</li><li>SET_DEFAULT：将外键字段设置为默认值，但前提是设置了default选项，且指向的对象是存在的</li><li>SET(value)：删除被引用对象时，设置外键字段为value。value如果是一个可调用对象，那么就会被设置为调用后的结果</li><li>DO_NOTHING：不做任何处理。但是，由于数据表之间存在引用关系，删除关联数据，会造成数据库抛出异常</li></ul></li></ul></li><li>可选参数 <ul><li>to_field：关联对象的字段名称。默认情况下，Django使用关联对象的主键（大部分情况下是id），如果需要修改成其他字段，可以设置这个参数。但是，需要注意，能够关联的字段必须有unique=True的约束</li><li>db_constraint：默认值是True，它会在数据库中创建外键约束，维护数据完整性</li><li>related_name：这个字段设置的值用于反向查询，默认不需要设置，Django会设置其为“小写模型名_set”。如果不想创建反向关联关系，可以将它设置为“+”或者以“+”结尾</li><li>related_query_name：这个名称用于反向过滤。如果设置了related_name，那么将用它作为默认值，否则Django会把模型的名称作为默认值</li></ul></li></ul><h3 id="一对一关系类型" tabindex="-1"><a class="header-anchor" href="#一对一关系类型"><span>一对一关系类型</span></a></h3><ul><li><p>类似于unique=True的ForeignKey</p></li><li><p>与ForeignKey的差别在于：反向查询上</p><ul><li>ForeignKey反向查询返回的是一个<strong>对象实例列表</strong></li><li>OneToOneField：返回的是一个<strong>对象实例</strong></li></ul></li><li><p>OneToOneField的定义：<code>class models.OneToOneField(to, on_delete, parent_link=False, **options)</code></p></li><li><p>parent_link参数：</p><ul><li>True：表示在继承另一个非抽象的Model中使用时，该字段会变成指向父类实例的应用</li></ul></li><li><p>例子：关联对象的字段名称。默认情况下，Django使用关联对象的主键（大部分情况下是id），如果需要修改成其他字段，可以设置这个参数。但是，需要注意，能够关联的字段必须有unique=True的约束</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">django</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">db</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">django</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">contrib</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">auth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">User</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span class="space"> </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">CusTomUser</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">models</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Model</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">user</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OneToOneField</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">to</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">User</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">on_delete</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">CASCADE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sign</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CharField</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">max_length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">255</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">help_text</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">u</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">用户签名</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="多对多关系类型" tabindex="-1"><a class="header-anchor" href="#多对多关系类型"><span>多对多关系类型</span></a></h3><ul><li><p>此关系类型Django会通过中间表来进行维护</p></li><li><p>定义格式：<code>class django.db.models.ManyToManyField(to, **option)</code></p></li><li><p>重要的可选参数：</p><ul><li>related_name：用于反向查询</li><li>db_table：用于指定中间表的名称</li><li>through：用于指定中间表</li></ul></li><li><p>例子：针对Author和Book之间的多对多关系</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">django</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">db</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span class="space"> </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Book</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">models</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Model</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">title</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CharField</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">max_length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">64</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">help_text</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">u</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">书名</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span class="space"> </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Author</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">models</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Model</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CharField</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">max_length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">32</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">help_text</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">u</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">作者</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">books</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ManyToManyField</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">to</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Book</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_4-2-6-model的继承模型" tabindex="-1"><a class="header-anchor" href="#_4-2-6-model的继承模型"><span>4.2.6 Model的继承模型</span></a></h2><ul><li>三种继承模型 <ul><li>抽象基类</li><li>多表继承</li><li>代理模型</li></ul></li></ul><h3 id="抽象基类" tabindex="-1"><a class="header-anchor" href="#抽象基类"><span>抽象基类</span></a></h3><p>抽象Model专门设计为被其他的子类继承，它将子Model中通用的元素聚合到一起，以便子Model不用多次重复定义这些通用的部分，且对于修改也只需要操作基类</p><ul><li>定义Meta内部类，并将<code>abstract</code>设置为<code>True</code>，就可把当前的Model定义为抽象基类了</li><li>抽象基类，不能被实例化，所以Django不会为它创建数据表和查询管理器</li></ul><p>Model的元数据继承关系的几个原则</p><ul><li>抽象基类中定义的元数据，子类中没有定义，子类会继承基类中的元数据。</li><li>抽象基类中定义的元数据，子类也定义了，子类优先级更高。</li><li>子类可以定义自己的元数据，即不出现在抽象基类中的元数据。</li></ul><h3 id="多表继承" tabindex="-1"><a class="header-anchor" href="#多表继承"><span>多表继承</span></a></h3><p>继承方式的效果是父Model和子Model都会有数据库表，且Django会自动给子Model添加一个OneToOneField类型的字段指向父Model，而这个字段会成为子Model数据表的主键</p><ul><li><p>例子</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">django</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">db</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span class="space"> </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">CategortTopic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Topic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">分类</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Topic</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">category</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">models</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CharField</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">max_length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">32</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">help_text</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">类别</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>与抽象基类的显著不同点是Meta的继承</p><ul><li>子类不会继承父类的Meta定义</li><li>但是有两个Meta元选项会被子类继承：<code>ordering</code>，<code>get_latest_by</code></li></ul></li></ul><h3 id="代理模型" tabindex="-1"><a class="header-anchor" href="#代理模型"><span>代理模型</span></a></h3><ul><li><p>使用场景：需要给原始的Model添加一些方法或者修改它的Meta选项，但是不需要修改原始Model的字段定义</p></li><li><p>创建方法：将Meta中的proxy选项设置为<code>True</code></p></li><li><p>例如：需要给Topic添加title的校验方法且查询记录按照id的顺序返回</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span class="space"> </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ProxyTopic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Topic</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">代理</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Topic</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span class="space"> </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Meta</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ordering</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">id</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">proxy</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">True</span></span>
<span class="line"></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">id_topic_valid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">django</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">in</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">title</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>代理模型只能继承自一个非抽象的基类，并且不能同时继承多个非抽象基类</p></li></ul>`,57)]))}const d=i(e,[["render",p],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/python/5zzbjs5k/","title":"4.2 Model相关的概念和使用方法","lang":"zh-CN","frontmatter":{"createTime":"2025/02/17 16:59:38","permalink":"/python/5zzbjs5k/","title":"4.2 Model相关的概念和使用方法","description":"4.2 Model相关的概念和使用方法 4.2.1 Model的组成部分 django.db.models.Model Meta内部类声明元数据 定义数据表项的Field实例 __str__方法 4.2.2 Meta元数据类属性说明 4.2.3 Field的通用字段选项 4.2.4 基础字段类型 django.db.models.Field db_ty...","head":[["meta",{"property":"og:url","content":"https://notes.moniter.top/python/5zzbjs5k/"}],["meta",{"property":"og:site_name","content":"Richie Lin"}],["meta",{"property":"og:title","content":"4.2 Model相关的概念和使用方法"}],["meta",{"property":"og:description","content":"4.2 Model相关的概念和使用方法 4.2.1 Model的组成部分 django.db.models.Model Meta内部类声明元数据 定义数据表项的Field实例 __str__方法 4.2.2 Meta元数据类属性说明 4.2.3 Field的通用字段选项 4.2.4 基础字段类型 django.db.models.Field db_ty..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.2 Model相关的概念和使用方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{},"autoDesc":true,"filePathRelative":"notes/python/前端框架/Django/chapter-04：ORM应用与原理剖析/4.2 Model相关的概念和使用方法.md"}');export{d as comp,k as data};
