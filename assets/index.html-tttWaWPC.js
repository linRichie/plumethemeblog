import{_ as e,c as s,b as t,o as n}from"./app-BVpc6fz1.js";const a={};function p(r,i){return n(),s("div",null,i[0]||(i[0]=[t('<figure><img src="https://oss.moniter.top/uPic/2023-12-04/mRHW8S.png" alt="mRHW8S" tabindex="0" loading="lazy"><figcaption>mRHW8S</figcaption></figure><p>今天，我们将从我们的第一个 CI/CD 工具 Jenkins 开始。我们将介绍该设置的含义、功能和基本要素。</p><h2 id="什么是詹金斯" tabindex="-1"><a class="header-anchor" href="#什么是詹金斯"><span>什么是詹金斯？</span></a></h2><p>Jenkins 是一款智能工具，帮助开发人员在 CI/CD 管道中轻松、一致地构建、测试和启动他们的代码软件。它是关键的开源自动化工具，对于 DevOps 领域和构建强大的 CI/CD 管道至关重要。它使开发人员能够一致地构建、验证和发布他们的软件产品。 Jenkins 是 CI/CD 领域中最有影响力的工具之一，提供了促进分布式构建的主从架构。</p><p>主节点充当协调器，监督 GUI 操作和 API 访问点，而代理（可互换地称为工作节点或从节点）执行实际工作负载。从本质上讲，Jenkins 是基石。简化软件开发和部署流程，提高可靠性，并加快交付高质量的软件解决方案。</p><p>将其视为指挥软件变更流程的交通警察。它通过协调软件团队不同部分的工作来确保一切顺利进行。它是开发人员的首选帮手，让他们的生活更轻松，软件更好。</p><h2 id="安装和设置" tabindex="-1"><a class="header-anchor" href="#安装和设置"><span>安装和设置</span></a></h2><p>我们要做的第一件事是通过 Docker 容器设置 Jenkins。我们将使其变得简单，以便我们可以继续讨论 Jenkins 的基本部分。在我们开始处理之前，请确保在本地主机上安装 docker。</p><ol><li>让我们获取官方 Jenkins 镜像并启动 Jenkins 服务器。通过您的 IDE 托管它。</li></ol><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">pull</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">jenkins/jenkins</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">$</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">docker</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">run</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-d</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-p</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">8080:8080</span><span class="space"> </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-v</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">jenkins_volume:/var/jenkins_home</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">—</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">name</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">my_jenkins</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">jenkins/jenkins</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在继续之前，让我分解一下上面在 Docker 容器中设置 Jenkins 的命令：</p><ul><li><code>docker run</code> ：此命令启动容器。</li><li><code>-d</code> ：它以分离模式运行，这意味着您不会直接看到任何日志。</li><li><code>-p 8080:8080</code> ：该行导出一个端口供外部访问。</li><li><code>-v</code> ：“v”表示卷，所有 Jenkins 文件都存储在其中。此步骤至关重要，因为如果没有它，如果容器终止或遇到问题，您的配置和设置可能会丢失。有关 Docker 卷的更多详细信息，请参阅 Docker 卷文档。</li><li><code>jenkins_volume</code> ：这指向本地主机上的目录。</li><li><code>:/var/jenkins_home</code> ：它链接到 Docker 容器内的目录。</li><li><code>--name my_jenkins</code> ：这是一个可选的容器名称，但为容器提供名称被认为是一个很好的做法。</li><li><code>jenkins/jenkins</code> ：最后，这表示图像的名称。</li></ul><p>设置完成后，如果您打开 Web 浏览器并导航到 localhost:8080，您应该会看到预期的界面。</p><p>您需要密码才能登录 Jenkins。 Jenkins 通过启动服务器提供初始密码。这可以找到：</p><ul><li>检查日志 → <code>docker log [容器名称]</code> 或</li><li>与容器交互并在给定路径 <code>/var/jenkins_home/secrets/initialAdminPassword</code> 下查看</li></ul><p>我会用第二种方式</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#this</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">is</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">my</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">initial</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">password$</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">docker</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">exec</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">my_jenkins</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">cat/var/jenkins_home/secrets/initialAdminPassword7805a2621fee4388bbc77e00b5655ad7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后单击继续并下一步安装首选插件。这将需要几分钟的时间。安装插件后，您应该会看到管理面板，您可以在其中设置您的名称和密码。</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*hTpif2EScW76Lfl15TkFnw.png" alt="Create-Admin-User" tabindex="0" loading="lazy"><figcaption>Create-Admin-User</figcaption></figure><p>设置您的用户名、密码，然后保存以继续。下一个屏幕应显示您的 Jenkins 仪表板。</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*rdAAwjr5lEFa57JP2E7wlA.png" alt="Jenkins_Dashboard" tabindex="0" loading="lazy"><figcaption>Jenkins_Dashboard</figcaption></figure><h2 id="探索-jenkins-管道" tabindex="-1"><a class="header-anchor" href="#探索-jenkins-管道"><span>探索 Jenkins 管道</span></a></h2><p>因此，我们将讨论有多少可用的管道。在Jenkins中，有很多项目：Maven、Projects Pipeline、External Job、多配置Project Folder Multi、Branch和Organization文件夹。</p><p>然而，最常用的管道类型是单管道和多分支管道。很少使用自由式项目。</p><p>那么什么是freestyle pipeline呢？ Freestyle 是一个简单的项目，您可以在其中配置所有内容，Jenkins 将构建您的项目，并且您可以使用任何 SCM（源代码管理）。如果你想部署某些东西，你就想执行某些东西。然而，大多数管道都是基于 CI/CD 管道项目。</p><p>它基本上运行在代理上。代理基本上是执行者，执行您的所有步骤。我将向您展示一些代理和管道，这仅适用于 github 的单个分支。重新定位，假设你有一个产品</p><p><strong><em>什么是单一管道</em></strong></p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*nDX9C6lbqoaDCNyQ9P4n_g.png" alt="单一管道" tabindex="0" loading="lazy"><figcaption>单一管道</figcaption></figure><p>单管道示例</p><p>Jenkins 中的单个管道旨在构建、测试和部署一个特定的应用程序或项目。让我们回顾一下要点和优势</p><ol><li>使用案例：当您有一个软件项目想要自动化构建和部署过程时，这是理想的选择。</li><li>配置：您在 Jenkins 中创建一个管道作业，它处理该单个项目的整个生命周期。</li><li>优点：对于小型项目而言，易于设置和管理。它简化了单个代码库的自动化。</li></ol><p><strong><em>什么是多分支管道</em></strong></p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*Qx6weEba11dJ2iysb9mr_A.png" alt="多分支管道" tabindex="0" loading="lazy"><figcaption>多分支管道</figcaption></figure><p>多分支管道示例</p><p>当您的软件项目有多个分支或版本，并且您希望独立地自动化每个分支的 CI/CD 流程时，请使用多分支管道。</p><ol><li>用例：它非常适合具有多个开发分支（例如功能分支、开发、测试、登台、生产）的大型项目。</li><li>配置：您配置单个多分支管道作业，它会自动检测和管理源代码存储库中的分支。</li><li>优点：同时实现各个分支机构的自动化。它有助于确保每个分支都经过单独测试和部署，从而保持代码质量和稳定性。</li></ol><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*ixJMMPkUeB58ZVXW4Cz-pQ.png" alt="Create-Project" tabindex="0" loading="lazy"><figcaption>Create-Project</figcaption></figure><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*rWk1IqF0ebXlGz_3W0ceMQ.png" alt="Project-Setting" tabindex="0" loading="lazy"><figcaption>Project-Setting</figcaption></figure><p>这就是单管道配置的样子</p><h2 id="在多分支上创建管道" tabindex="-1"><a class="header-anchor" href="#在多分支上创建管道"><span>在多分支上创建管道</span></a></h2><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*-apk2zWx6FG3KzkZFhWRCg.png" alt="多分支创建管道" tabindex="0" loading="lazy"><figcaption>多分支创建管道</figcaption></figure><ol><li>插入显示名称，然后插入分支源凭据。</li><li>复制 Github URL 并推送到您的 IDE</li></ol><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*PsHULMJkcfJ9Jx9gaNNN4g.png" alt="github配置" tabindex="0" loading="lazy"><figcaption>github配置</figcaption></figure><p>前往您的存储库查看代码</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*mSizMGi8nnbt07JmIxpoTw.png" alt="See-Report-Code" tabindex="0" loading="lazy"><figcaption>See-Report-Code</figcaption></figure><p>将代码复制并粘贴到您的管道凭据中</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*6RTx36-CbKJQyULcktcowg.png" alt="Jenkins-Credential" tabindex="0" loading="lazy"><figcaption>Jenkins-Credential</figcaption></figure><p>确保您的 Github 凭据经过验证</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*jE4aL-qEbkxC8832207JLg.png" alt="Github-Credential" tabindex="0" loading="lazy"><figcaption>Github-Credential</figcaption></figure><p>1.策略-所有分支 2.发现拉取请求-当前请求 3.删除不需要的分叉部分</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*Np3Y62wgEgx_eJsKxpSfUQ.png" alt="Jenkins-Credential" tabindex="0" loading="lazy"><figcaption>Jenkins-Credential</figcaption></figure><p>属性策略-所有分支→构建配置：Mode-Jenkinsfile</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*-5gOcCww22s_Emn4sx_Xrg.png" alt="Jenkins-Credential" tabindex="0" loading="lazy"><figcaption>Jenkins-Credential</figcaption></figure><p>确保旧文件的保留天数为 3，然后旧项目的最大保留天数为 5-7 天。</p><p>之后您的管道就创建好了。我们将去扫描存储库来查看我们的状态。</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*u9zLgWpECSUTa-xSPlYCqA.png" alt="Jenkins-Credential" tabindex="0" loading="lazy"><figcaption>Jenkins-Credential</figcaption></figure><p>然后我们将创建新的分支。</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*WNN60usSVXDgLtkTds73pg.png" alt="Create-New-Branch" tabindex="0" loading="lazy"><figcaption>Create-New-Branch</figcaption></figure><p>我们将使用 git 版本控制将代码推送到新分支</p><p>因此，如果您返回 Jenkins 存储库，您将单击扫描存储库，您将看到生产存储库。</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*GA7OmFtBMslcbyzkrv0NXA.png" alt="see-devops" tabindex="0" loading="lazy"><figcaption>see-devops</figcaption></figure><p>在单击“扫描存储库”之前</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*uLzVvOLsgOIelQUhr1HFIg.png" alt="see-devops" tabindex="0" loading="lazy"><figcaption>see-devops</figcaption></figure><p>刷新扫描存储库屏幕后</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*Rr5k6KkRuaLSIr4hP4Btnw.png" alt="refresh-devops" tabindex="0" loading="lazy"><figcaption>refresh-devops</figcaption></figure><p>输入您的分支并查看它正在构建（#1 代表正在构建的分支）</p><p>在构建分支时，我们还可以在管道内创建 2 个或更多阶段。</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*NsDHuL77mxzFErCw-pO0CA.png" alt="NsDHuL77mxzFErCw" tabindex="0" loading="lazy"><figcaption>NsDHuL77mxzFErCw</figcaption></figure><p>让我们对生产分支进行更改并推送它。</p><p>确保我们的更改位于我们的存储库中。让我们访问我们的 Github。</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*_DB6a2AgClnHk2oLTF8gcA.png" alt="_DB6a2AgClnHk2oLTF8gcA" tabindex="0" loading="lazy"><figcaption>_DB6a2AgClnHk2oLTF8gcA</figcaption></figure><p>前往分行。点击生产</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*316r2p8Uuk9Y7g8f5r2ZiA.png" alt="316r2p8Uuk9Y7g8f5r2ZiA" tabindex="0" loading="lazy"><figcaption>316r2p8Uuk9Y7g8f5r2ZiA</figcaption></figure><p>这里是！</p><p>返回 Jenkins 并单击“立即构建”部分以查看分支生产。</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*W94G4QW-D4Caft_eoq8djg.png" alt="W94G4QW-D4Caft_eoq8djg" tabindex="0" loading="lazy"><figcaption>W94G4QW-D4Caft_eoq8djg</figcaption></figure><p>部署更改之前</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*L-KKLsiZhsTHk0cO0lgq1Q.png" alt="L-KKLsiZhsTHk0cO0lgq1Q" tabindex="0" loading="lazy"><figcaption>L-KKLsiZhsTHk0cO0lgq1Q</figcaption></figure><p>部署更改后</p><p>批准更改后，我们将发出拉取请求以将更改合并到我们的主分支上。</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*Lz4VdFpXgIK1sxGxAQIfbQ.png" alt="Lz4VdFpXgIK1sxGxAQIfbQ" tabindex="0" loading="lazy"><figcaption>Lz4VdFpXgIK1sxGxAQIfbQ</figcaption></figure><p>转到打开拉取请求</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*JSIs9NtaztZwSMY2HA9-nw.png" alt="JSIs9NtaztZwSMY2HA9-nw" tabindex="0" loading="lazy"><figcaption>JSIs9NtaztZwSMY2HA9-nw</figcaption></figure><p>确认合并</p><figure><img src="https://miro.medium.com/v2/resize:fit:1222/1*lVobtboutKhz1A8XQY-4cw.png" alt="lVobtboutKhz1A8XQY-4cw" tabindex="0" loading="lazy"><figcaption>lVobtboutKhz1A8XQY-4cw</figcaption></figure><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*sYgw5D0apjFhPF-I6DjDOQ.png" alt="sYgw5D0apjFhPF-I6DjDOQ" tabindex="0" loading="lazy"><figcaption>sYgw5D0apjFhPF-I6DjDOQ</figcaption></figure><p>我们确认这些更改已安装在我们的主分支中。</p><ul><li><p>前 <img src="https://miro.medium.com/v2/resize:fit:1400/1*SZsCCg7kCEz1tnX5NGsA-A.png" alt="SZsCCg7kCEz1tnX5NGsA-A" loading="lazy"></p></li><li><p>后 <img src="https://miro.medium.com/v2/resize:fit:1400/1*Qx6weEba11dJ2iysb9mr_A.png" alt="Qx6weEba11dJ2iysb9mr_A" loading="lazy"></p></li></ul><p>多分支管道的目的是让每个人都有自己的分支或者可能像一个团队。一群人或者一个团队可以做一些更改，或者他们可以对他们的更改进行单独的测试，而不是每次都创建一个 PR，然后将这些更改合并到主分支，然后启动单个分支管道。您还可以进行多分支并拥有一个单独的分支并测试您的更改。不会影响其他分支。</p><h2 id="单分支管道-vs-多分支管道-结论" tabindex="-1"><a class="header-anchor" href="#单分支管道-vs-多分支管道-结论"><span>单分支管道 VS 多分支管道 - 结论</span></a></h2><p>Jenkins 中单分支管道和多分支管道的主要区别在于它们的分支处理能力。单分支管道仅限于从单个分支构建更改，这使得它们不太适合具有多个正在进行的分支的存储库。另一方面，多分支管道提供了动态且高效的解决方案。它们自动检测并构建 GitHub 存储库中所有分支的更改，并根据需要为每个分支提供单独的 CI/CD 管道。这种多功能性简化了开发流程，使管理和测试跨不同分支的代码更改变得更加容易，所有这些都在一个统一的管道中进行。借助多分支管道，您可以通过有效处理多个分支及其各自的 CI/CD 要求来增强 Jenkins 工作流程。</p><p>总而言之，Jenkins 是软件开发领域的工厂经理。它是一个有助于自动化和简化构建、测试和部署代码过程的工具。但当你深入研究它的管道时，真正的魔力就会发生。这些管道就像工厂中的装配线，您可以在其中定义软件旅程的每一步，从编写代码到将其交付给用户。掌握 Jenkins 管道对于 DevOps 至关重要，因为它允许您创建组织良好的自动化工作流程，使您的软件开发过程更快、更可靠且不易出错。这是保持现代开发团队顺利运行的秘诀。因此，如果您正在深入研究 DevOps，Jenkins 及其管道将是您这段激动人心的旅程中最好的朋友。</p><figure><img src="https://miro.medium.com/v2/resize:fit:1400/1*4hdNzxtaGy-mmfdnQlP8ww.png" alt="4hdNzxtaGy-mmfdnQlP8ww" tabindex="0" loading="lazy"><figcaption>4hdNzxtaGy-mmfdnQlP8ww</figcaption></figure>',93)]))}const m=e(a,[["render",p],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/linux/7w4weiwm/","title":"Jenkins CI/CD 管道","lang":"zh-CN","frontmatter":{"createTime":"2025/02/17 16:59:04","permalink":"/linux/7w4weiwm/","title":"Jenkins CI/CD 管道","description":"mRHW8SmRHW8S 今天，我们将从我们的第一个 CI/CD 工具 Jenkins 开始。我们将介绍该设置的含义、功能和基本要素。 什么是詹金斯？ Jenkins 是一款智能工具，帮助开发人员在 CI/CD 管道中轻松、一致地构建、测试和启动他们的代码软件。它是关键的开源自动化工具，对于 DevOps 领域和构建强大的 CI/CD 管道至关重要。它...","head":[["meta",{"property":"og:url","content":"https://notes.moniter.top/linux/7w4weiwm/"}],["meta",{"property":"og:site_name","content":"Richie Lin"}],["meta",{"property":"og:title","content":"Jenkins CI/CD 管道"}],["meta",{"property":"og:description","content":"mRHW8SmRHW8S 今天，我们将从我们的第一个 CI/CD 工具 Jenkins 开始。我们将介绍该设置的含义、功能和基本要素。 什么是詹金斯？ Jenkins 是一款智能工具，帮助开发人员在 CI/CD 管道中轻松、一致地构建、测试和启动他们的代码软件。它是关键的开源自动化工具，对于 DevOps 领域和构建强大的 CI/CD 管道至关重要。它..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.moniter.top/uPic/2023-12-04/mRHW8S.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jenkins CI/CD 管道\\",\\"image\\":[\\"https://oss.moniter.top/uPic/2023-12-04/mRHW8S.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*hTpif2EScW76Lfl15TkFnw.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*rdAAwjr5lEFa57JP2E7wlA.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*nDX9C6lbqoaDCNyQ9P4n_g.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*Qx6weEba11dJ2iysb9mr_A.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*ixJMMPkUeB58ZVXW4Cz-pQ.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*rWk1IqF0ebXlGz_3W0ceMQ.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*-apk2zWx6FG3KzkZFhWRCg.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*PsHULMJkcfJ9Jx9gaNNN4g.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*mSizMGi8nnbt07JmIxpoTw.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*6RTx36-CbKJQyULcktcowg.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*jE4aL-qEbkxC8832207JLg.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*Np3Y62wgEgx_eJsKxpSfUQ.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*-5gOcCww22s_Emn4sx_Xrg.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*u9zLgWpECSUTa-xSPlYCqA.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*WNN60usSVXDgLtkTds73pg.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*GA7OmFtBMslcbyzkrv0NXA.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*uLzVvOLsgOIelQUhr1HFIg.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*Rr5k6KkRuaLSIr4hP4Btnw.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*NsDHuL77mxzFErCw-pO0CA.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*_DB6a2AgClnHk2oLTF8gcA.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*316r2p8Uuk9Y7g8f5r2ZiA.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*W94G4QW-D4Caft_eoq8djg.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*L-KKLsiZhsTHk0cO0lgq1Q.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*Lz4VdFpXgIK1sxGxAQIfbQ.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*JSIs9NtaztZwSMY2HA9-nw.png\\",\\"https://miro.medium.com/v2/resize:fit:1222/1*lVobtboutKhz1A8XQY-4cw.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*sYgw5D0apjFhPF-I6DjDOQ.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*SZsCCg7kCEz1tnX5NGsA-A.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*Qx6weEba11dJ2iysb9mr_A.png\\",\\"https://miro.medium.com/v2/resize:fit:1400/1*4hdNzxtaGy-mmfdnQlP8ww.png\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{},"autoDesc":true,"filePathRelative":"notes/linux/cicd/Jenkins_ci_cd_Pipeline.md"}');export{m as comp,g as data};
